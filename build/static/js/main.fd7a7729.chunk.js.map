{"version":3,"sources":["components/card/card.jsx","components/card-list/cardlist.component.jsx","components/search-box/searchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","filteredMonsters","this","length","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,WCHKC,G,MAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,WAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,WCJlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCyCHG,G,wDA3CX,aAAe,IAAD,8BACV,gBAeJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,qDAUd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAOjD,WACI,IACIC,EADJ,EAAkCC,KAAKP,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAQlB,OANIV,EAASqB,SACTF,EAAmBnB,EAASsB,QAAO,SAAA3B,GAAO,OACtCA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,mBAKpD,sBAAK/B,UAAU,MAAf,UACI,oDACA,cAAC,EAAD,CACIW,YAAY,qBACZC,aAAegB,KAAKhB,eAExB,cAAC,EAAD,CAAUJ,SAAUmB,GAAoBC,KAAKP,MAAMb,kB,GArCjDyB,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd7a7729.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}/set=set2$size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p> { props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card'\r\nimport './card-list.css'\r\n\r\nexport const CardList = props => {\r\n    return <div className='cardList'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={ monster } />\r\n        ))}\r\n    </div>\r\n}","import React from 'react'\r\nimport './searchBox.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange }) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={ placeholder }\r\n        onChange={handleChange} />\r\n)\r\n","import React, { Component } from 'react'\r\nimport { CardList } from './components/card-list/cardlist.component'\r\nimport { SearchBox } from './components/search-box/searchBox'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ monsters: users}))\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ searchField: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        let filteredMonsters;\r\n        if (monsters.length) {\r\n            filteredMonsters = monsters.filter(monster =>\r\n                monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n            )\r\n        }\r\n \r\n        return (\r\n            <div className=\"App\">\r\n                <h1> Monsters Rolodex </h1>\r\n                <SearchBox\r\n                    placeholder='Search monsters...'\r\n                    handleChange={ this.handleChange }\r\n                />\r\n                <CardList monsters={filteredMonsters || this.state.monsters} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}